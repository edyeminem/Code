#ifdef __cplusplus
extern "C" {
#endif
typedef struct {
    uint32_t buf[16];
    uint32_t hash[8];
    uint32_t len[2];
} sha256_ctx;
void sha256_initializare(sha256_ctx *ctx) {
    ctx->hash[0 ... 7] = // se adaugă 8 valori în hexazecimale;
    ctx->len[0 ... 1] = 0;
}
void sha256_hash(sha256_ctx *ctx, uint8_t *data, uint32_t len) {
}
void sha256_terminat(sha256_ctx *ctx, uint8_t *hash) {
}
void sha256(uint8_t *input, uint8_t *output, int len) {
    sha256_ctx ctx;
    sha256_initializare(&ctx);
    sha256_hash(&ctx, input, len);
    sha256_terminat(&ctx, output);
}
#ifdef cplusplus
}
#endif
#define ROTL(x, n) (((x) << (n)) | ((x) >> (32 - (n))))
#define ROTR(x, n) (((x) >> (n)) | ((x) << (32 - (n))))
#define SIGMA0(x)  (ROTR((x), 2) ^ ROTR((x), 13) ^ ROTR((x), 22))
#define SIGMA1(x)  (ROTR((x), 6) ^ ROTR((x), 11) ^ ROTR((x), 25))
#define GAMMA0(x)  (ROTR((x), 7) ^ ROTR((x), 18) ^ ((x) >> 3))
#define GAMMA1(x)  (ROTR((x), 17) ^ ROTR((x), 19) ^ ((x) >> 10))
static const uint32_t K[64] = {
// se adaugă 64 de valori în hexazecimal
}
static void _bswapw(uint32_t *p, uint32_t i) {
    while (i--) {
        p[i] = __builtin_bswap32(p[i]);
    }
}
#ifndef USE_STD_MEMCPY
void * __cdecl _memcp(void *d, const void *s, uint32_t sz) {
    char *dest = (char *)d;
    const char *src = (const char *)s;
    while (sz--) {
        *dest++ = *src++;
    }
    return dest;
}
#endif
static void _rtrf(uint32_t *b, uint32_t *p, uint32_t i, uint32_t j) {
    #define B(x, y) b[(x - y) & 7]
    #define P(x, y) p[(x + y) & 15]
    B(7, i) += (j ? (P(i, 15) += G1(P(i, 14)) + P(i, 9) + G0(P(i, 1))) : P(i, 15)) + K[i + j] + S1(B(4, i)) + (B(6, i) ^ (B(4, i) & (B(5, i) ^ B(6, i))));
    B(3, i) += B(7, i);
    B(7, i) += S0(B(0, i)) + ((B(0, i) & B(1, i)) | (B(2, i) & (B(0, i) ^ B(1, i))));
    #undef B
    #undef P
}
static void _hash(sha256_ctx *ctx) {
    uint32_t b[8];
    for (int i = 0; i < 8; i++) {
        b[i] = ctx->hash[i];
    }
    for (uint32_t j = 0; j < 64; j += 16) {
        for (int i = 0; i < 16; i++) {
            _rtrf(b, ctx->buf, i, j);
        }
    }
    for (int i = 0; i < 8; i++) {
        ctx->hash[i] += b[i];
    }
}
void sha256_initializare(sha256_ctx *ctx) {
    ctx->len[0] = ctx->len[1] = 0;
    uint32_t hash[8] = {
// se introduc 8 valori în hexazecimale
    };
    for (int i = 0; i < 8; i++) {
        ctx->hash[i] = hash[i];
    }
}
void sha256_hash(sha256_ctx *ctx, uint8_t *dat, uint32_t sz) {
    uint32_t i = ctx->len[0] & 63;
    if ((ctx->len[0] += sz) < sz) {
        ++(ctx->len[1]);
    }
    while (sz > 0) {
        uint32_t l = 64 - i;
        if (sz < l) {
            l = sz;
        }
        memcpy((char *)ctx->buf + i, dat, l);
        i += l;
        dat += l;
        sz -= l;
        if (i == 64) {
            BSWP(ctx->buf, 16);
            _hash(ctx);
            i = 0;
        }
        memcpy((char *)ctx->buf + i, dat, l);
    }
}
void sha256_terminat(sha256_ctx *ctx, uint8_t *buf) {
    uint32_t i = ctx->len[0] & 63;
    uint32_t j = ((~i) & 3) << 3;
    BSWP(ctx->buf, (i + 3) >> 2);
    ctx->buf[i >> 2] &= // se introduce un padding << j;
    ctx->buf[i >> 2] |= 0x00000080 << j;
    if (i >= 56) {
        ctx->buf[15] ^= (i < 60) ? ctx->buf[15] : 0;
        _hash(ctx);
        i = 0;
    }
    while (i < 14)
        ctx->buf[i++] = 0;
    ctx->buf[14] = (ctx->len[1] << 3) | (ctx->len[0] >> 29);
    ctx->buf[15] = ctx->len[0] << 3;
    _hash(ctx);
    for (i = 0; i < 32; i++)
        buf[i] = (uint8_t)(ctx->hash[i >> 2] >> ((~i & 3) << 3));
}
void sha256(uint8_t *output, uint8_t *input, int inlng)
{
      sha256_ctx ctx;
      sha256_initializare(&ctx);
      sha256_hash(&ctx, input, inlng);
      sha256_terminat(&ctx, output);
}
#ifdef __cplusplus
}
#endif
